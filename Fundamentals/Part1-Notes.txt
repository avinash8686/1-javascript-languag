Contains:
> Hello, world!
> Code structure
> The modern mode, "use strict"
> Variables
> Data types
> Interaction: alert, prompt, confirm
> Type Conversions
> Basic operators, maths

The modern mode, "use strict"

JS is always backward compatability, i.e the old features still work and are not replaced by new features
Pblm: Bcoz of this, the old mistakes made by creators still exists....
Sol: use strict

Ensure that “use strict” is at the top to enable modern JS

There’s no way to cancel use strict

(function() {
  'use strict';

  // ...your code here...
})()

Should we “use strict”?

Modern JavaScript supports “classes” and “modules” – advanced language structures (we’ll surely get to them), 
that enable use strict automatically. So we don’t need to add the "use strict" directive, if we use them.

============================================================
Variables

variable naming can separate beginner & pro.

let 1a; // cannot start with a digit

let my-name; // hyphens '-' aren't allowed in the name

Declaring twice triggers an error

let – is a modern variable declaration.
var – is an old-school variable declaration. Normally we don’t use it at all, but we’ll cover subtle differences from let in the chapter The old "var", just in case you need them.
const – is like let, but the value of the variable can’t be changed.
(UPPERCASE is used for hardcoded in const)

=============================================================
Data types
8 basic data types in JavaScript

// no error
let message = "hello";
message = 123456;

**Number** - Int & Floating Point
let n = 123;
n = 12.345;

Ops in Number (+-/*...)
“special numeric values” > Infinity, -Infinity and NaN
alert( 1 / 0 ); // Infinity
alert( "not a number" / 2 ); // NaN, such division is erroneous

NaN is sticky. Any further mathematical operation on NaN returns NaN:
alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "not a number" / 2 - 1 ); // NaN

Exception: NaN ** 0 is 1 
Special numeric values formally belong to the “number” type. 
Of course they are not numbers in the common sense of this word.

**BigInt**
JS cannot store integers larger than (2^53-1) (that’s 9007199254740991)
Or less than -(2^53-1) for negatives.

Outside of ±(2^53-1) range, there'll be precision error
Not all the digits fit into 64-bit storage, So an approximate value may be stored.

Eg: An approx value us stored as below
console.log(9007199254740991 + 1); // 9007199254740992
console.log(9007199254740991 + 2); // 9007199254740992

All numbers ouside of ±(2^53-1) can't be stored in Number type.
They have to be stored in BitInt type.

const bigInt = 1234567890123456789012345678901234567890n;

It is recently added to JS, and are rarely needed.

**String**

In JavaScript, there are 3 types of quotes.

Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`

Backticks are “extended functionality” quotes. 
They allow to execute an expression with help of ${}

Eg:
let name = "John";

// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!

// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3

**Boolean (logical type)**

The boolean type has only two values: true and false.

Eg1:
let nameFieldChecked = true; // yes, name field is checked
let ageFieldChecked = false; // no, age field is not checked

Eg2:
let isGreater = 4 > 1;

alert( isGreater ); // true (the comparison result is "yes")

**The “null” value**

let age = null;
It’s just a special value which represents “nothing”, “empty” or “value unknown”.

**The “undefined” value**
Similar to null, it is it's own type.
meaning: not defined

let age;

alert(age); // shows "undefined"


**Objects and Symbols**
Object type is special.
All other types are called primitive, coz the contain only single value.

In contrast, objects are used to store collections of data and more complex entities.

The symbol type is used to create unique identifiers for objects. 
We have to mention it here for the sake of completeness, but also postpone the details till we know objects.

**The typeof operator**
The typeof operator returns the type of the operand

typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)

"Math" is a built-in object that provides mathematical operations. 
We will learn it in the chapter Numbers. Here, it serves just as an example of an object.

"null" The result of typeof null is "object". 
That’s an officially recognized error in typeof, coming from very early days of JavaScript and kept for compatibility. 
Definitely, null is not an object

"alert" The result of typeof alert is "function", because alert is a function

NOTE: typeof(x). It’s the same as typeof x
typeof is an operator & not a function. 
The typeof (), here these brackets denote (1+3) ops where we use brackets for doing math operation
& they don't belong to typeof.

=============================================================

Interaction: alert, prompt, confirm

Functions to interact with the user: alert, prompt and confirm.

# alert("Hello"); // shows msg & wait for user to click on ok.

# result = prompt(title, [default]); // shows modal window with txt msg, an i/p field for visitor

title
The text to show the visitor.

default
An optional second parameter, the initial value for the input field.

# result = confirm(question); //modal with two buttons: OK and Cancel.

The result is true if OK is pressed and false otherwise.

let isBoss = confirm("Are you the boss?");

alert( isBoss ); // true if OK is pressed

=============================================================

Type Conversions

Most of the time, operators and functions automatically convert the values given to them to the right type.

Eg:
"alert" automatically converts any value to a string to show it.
"Mathematical operations" convert values to numbers.

**String Conversion**
String conversion happens when we need the string form of a value.

let value = true;
alert(typeof value); // boolean

value = String(value); // now value is a string "true"
alert(typeof value); // string

A false becomes "false", null becomes "null", etc.

**Numeric Conversion**
Numeric conversion in mathematical functions and expressions happens automatically.

Eg:
alert( "6" / "2" ); // 3, strings are converted to numbers

Can use Number(value) to explicitly convert value to a number.
let str = "123";
alert(typeof str); // string

let num = Number(str); // becomes a number 123

alert(typeof num); // number

// Error (NaN) Not a Number
let age = Number("an arbitrary string instead of a number");

alert(age); // NaN, conversion failed

Egs:
alert( Number("   123   ") ); // 123
alert( Number("123z") );      // NaN (error reading a number at "z")
alert( Number(true) );        // 1
alert( Number(false) );       // 0

**Boolean Conversion**

alert( Boolean(1) ); // true
alert( Boolean(0) ); // false

alert( Boolean("hello") ); // true
alert( Boolean("") ); // false, bcoz the string is empty
alert( Boolean(" ") ); // true, bcoz the string is non-empty
alert( Boolean("0") ); // true, bcoz the string is non-empty and 0 is treated as string & not a number.

=============================================================

Basic operators, maths

**Terms: “unary”, “binary”, “operand”**

operand  > 5 * 2, 5 & 2 are two operands, * is the operator

unary > -x > - operator is applied to only single operand, so called as unary
binary > y-x > - operator is applied to two operands, so called binary

Maths

Addition +,
Subtraction -,
Multiplication *,
Division /,
Remainder %, > 5%2 = 1, 1 is the remainder of the division, the % operator returns remainder
Exponentiation ** > 2**2 =4, it states the power

**String concatenation with binary + **
s="helo"+"there" -> hellothere, here binary plus is applied to strings so it concatenates
Incase of numbers it performs addition.

Tricky:
'1' + 2 => "12", if atleast one operator is string, then it concatenates.
2 + '1' => "21" 

(2 + 2 + '1') => 41 (not 221) => the operator works one after the other.
2 + 2, both are numbers and it performed addition
4 + '1', atleast 1 is string, so it performed concatenation.

('1' + 2 + 2) => 122, First '1' + 2 => '12', one of it is string, so concatenation
'12' + 2 => 122, one of it is string, so concatenation

// For any other Math operators it performs math operation & not concatenation.

(6 - '2') => 4, operator is -, so it performed math operation.

('6' / '2') => 3, operator is /, so it performed math operation.

**Numeric conversion, unary + **

It shows no effect on Numbers, Converts only Non Numbers
x = 1
+x // 1

y=-2
+y // -2

Non-Numbers, converted boolean/string into numbers
alert(+true) // 1, read + as Number, so Number(true) -> 1
alert(+"") //0, read + as Number, so Number("") -> 0

// Need to convert String to Numbers is very often
Eg: Html Form fields are always strings
apples = '2'
oranges = '3'
apples + oranges = "23", binary plus concatenates strings

// To treate them as numbers
apples = '2'
oranges= '3'
(+apples + +oranges) => 5, '2' is converted to 2 (number), '3' is converted to 3 (number)
Now the + in the middle performs math as both are numbers

Note: Unary Plus(+) has the higher precedence compared to Binary Plus(+)

**Assignment**

= is an operator (low precedence 2)

x = 2 * 2 + 1;
x; //5

let a = 1;
let b = 2;

let c = 3 - (a = b + 1)


a; //3, at first b + 1 -> 3, assigned to a
c; //0, later 3 - (a) -> 3 - 3 = 0, now a holds the newly updated value, so the operation is done with a = 3

Chaining assignments

let a,b,c;

a=b=c= 2 + 2;

a; // 4
b; // 4
c; // 4

Chained assignments evaluate from right to left
First 2+2 is evaluated then assigned to variables c,b,a

Can be written as 
c = 2 + 2;
b = c;
a = c;

**Modify-in-place**

n = 2 
n = n + 5; // can be modified in-place

n+=5// 2 + 5 is evaluated, and stored in n again
Modify-in-place operator exists for all arth & bitwise operators /=, -= etc

m=2
m *= 3 + 5 // right part evaluated first, same as m*=8, m => 8 * 2=16

**Increment/decrement**
Increment ++ increases a variable by 1:
cntr=1
cntr++ // 2

Decrement -- decreases a variable by 1:
cntr=1
cntr-- // 0

// Operator can be placed before or after the variable
counter++ // postfix
++counter // prefix

But both do same operation
and what's the difference of postfix & prefix

We can only see that once we return the value.

Prefix form returns the new value

Postfix form returns the old value

Eg:
ctr=1
let a = ++ctr; // here the ctr is increased & returned the new value, so new value is assigned to a
alert(a); // 2

Eg:
ctr=1
let a = ctr++; // here the ctr is increased but returned old value, so 1 is assigned to a
alert(a); // 1

Note:
If we’d like to increase a value and immediately use the result of the operator, we need the prefix form:

let counter = 0;
alert( ++counter ); // 1
If we’d like to increment a value but use its previous value, we need the postfix form:

let counter = 0;
alert( counter++ ); // 0

**Bitwise operators**

Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.

The list of operators:

AND ( & )
OR ( | )
XOR ( ^ )
NOT ( ~ )
LEFT SHIFT ( << )
RIGHT SHIFT ( >> )
ZERO-FILL RIGHT SHIFT ( >>> )

Used very rarely, talk about it later

**Comma**

Unusual operator, used to write shorter code.

let a = (1+2, 3+4), here both are evaluated but the result of last one is returned
alert(a);//7 (comma(,) has a very low precedence)

Why do we need an operator that throws away everything except the last expression?

People use it in more complex constructs to put several actions in one line.

// three operations in one line
for (a = 1, b = 3, c = a * b; a < 10; a++) {
 ...
}


=============================================================

// QUIZ
"" + 1 + 0 = "10" //  > First one is empty string, so concatenation happens
"" - 1 + 0 = -1 //  > first one is empty string but - operator so math operation happens
true + false = 1 // 1 + 0 > with + and booleans, math operation happens and true turns to 0, false turns to 1
6 / "3" = 2 // > / operator so math operation happens, "3" converted to number 3
"2" * "3" = 6 // * multiplication so math operation happens, both "2" & "3" turns to numbers
4 + 5 + "px" = "9px" // Firstly both operands are numbers, so with + addition happens 45 + "px", px is string so concatenation happens
"$" + 4 + 5 = "$45" // First is $ which is string, so concatenation happens "$4" + 5, again concatenation happens as string operation with number
"4" - 2 = 2 // "4" is string but the operator is - so math operation happens
"4px" - 2 = NaN // Math operation should happen with - operator, but the 4px can't be converted to valid number
"  -9  " + 5 = "  -9  5" // First operand is string & with + operator, concatenation happens 
"  -9  " - 5 = -14 // First operand is number but with - operator math operation happens
null + 1 = 1 // null is converted to 0, bcoz of + operator and math operation happens
undefined + 1 = NaN // undefined is converted to NaN, NaN with anything math operation gives NaN
" \t \n" - 2 = -2 // \t, \n are nothing spaces and new lines which are removed from string which leaves an empty string and with - operator it does the math operation.